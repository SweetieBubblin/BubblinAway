<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The inputs used
input[0] = vk_up
input[1] = vk_down
input[2] = vk_left
input[3] = vk_right
input[4] = ord("Z")
input[5] = ord("X")

// Generate Unix seed
datetime = date_current_datetime();
var epoch = floor(date_create_datetime(1970, 1, 1, 0, 0, 0));
unix_time = floor(date_second_span(epoch, datetime));

// Set seed
random_set_seed(unix_time)

// Start generating random index values to use for combo
button[0] = irandom(5)
button[1] = irandom(5)
button[2] = irandom(5)
button[3] = irandom(5)

// Initialize current prompt
current_prompt = 0

// Score total
score_toAdd = 0

// Time for combo elapsed time
combo_timer = 2.0

// If the game is running or not
game_running = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Decrement combo time
combo_timer -= delta_time/1000000
obj_timer_numerical.myTime = obj_timegauge_fill.timer

// Make sure that we keep the combo timer from counting down past -1 (for a check for later)
if (combo_timer &lt;= -1) {
    combo_timer = -1
}

// If any of the input keys are pressed...
if game_running and keyboard_check_pressed(input[0]) xor keyboard_check_pressed(input[1]) xor keyboard_check_pressed(input[2]) xor keyboard_check_pressed(input[3]) xor keyboard_check_pressed(input[4]) xor keyboard_check_pressed(input[5]) {
    // And if the pressed key matches the current prompt...
    if keyboard_check_pressed(input[button[current_prompt]]) {
        // Go to the next prompt
        current_prompt ++
        
        // And if the next prompt is the finished area...
        if current_prompt &gt; 3 {
            // Restart back to the first key prompt
            current_prompt = 0
            
            // Adjust time interval to be decrementing up until 5 seconds
            if (obj_timegauge_fill.time_increment &gt;= 5.0) {
                obj_timegauge_fill.time_increment -= 0.5
            }
            
            // Adjust the difficulty measure to make time go by faster
            if (obj_timegauge_fill.timer_difficulty_value &lt;= 1.0) {
                obj_timegauge_fill.timer_difficulty_value += 0.002
            }
            
            // Generate new random key configurations
            button[0] = irandom(5)
            button[1] = irandom(5)
            button[2] = irandom(5)
            button[3] = irandom(5)
            
            // Add to score
            score_toAdd += 100
            
            // Increment score more if combo timer isn't at a negative
            if (combo_timer &gt;= 0) {
                score_toAdd += 200
            }
            
            // Increment score more if combo was done at last second
            if (obj_timegauge_fill.timer &lt;= 3.0) {
                score_toAdd += 500
            }
            
            // Increment size of bubble
            with (obj_bubble) { 
                target_size += (60 * global.delta_factor)
            }
            
            // Highlight
            with (obj_highlight) {
                target_size += (60 * global.delta_factor)
            }
            
            // And mouth attatchment
            with (obj_mouth_attatchment) {
                target_size += (60 * global.delta_factor)
            }
            
            // Increment score
            obj_score_display.score_val += score_toAdd
            
            // Reset values
            score_toAdd = 0
            combo_timer = 2.0
            
            // Increment timer up by increment amount
            if (obj_timegauge_fill.timer + obj_timegauge_fill.time_increment &gt;= 20.0) {
                obj_timegauge_fill.timer = 20.0
            } else {
                obj_timegauge_fill.timer += obj_timegauge_fill.time_increment
            }
            
            // Adjust character's sprite
            image_angle += (1 * global.delta_factor)
            obj_default_char.image_index = 2
            offset_x = 2.75;
        }
    }  else {
        current_prompt = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_input_prompts,button[0],x,y - 32,0.5,0.5,0,c_white,1)
draw_sprite_ext(spr_input_prompts,button[1],x + 128,y - 32,0.5,0.5,0,c_white,1)
draw_sprite_ext(spr_input_prompts,button[2],x + 256,y - 32,0.5,0.5,0,c_white,1)
draw_sprite_ext(spr_input_prompts,button[3],x + 384,y - 32,0.5,0.5,0,c_white,1)

for (var i = 0; i &lt; current_prompt; i++) {
    draw_sprite_ext(spr_input_success ,0 ,x + (i*128),y - 48,0.5,0.5,0,c_white,1)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
